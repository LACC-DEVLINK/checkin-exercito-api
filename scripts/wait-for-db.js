#!/usr/bin/env node
/**
 * Script para aguardar o banco de dados PostgreSQL estar dispon√≠vel
 * Alternativa ao wait-for-db.sh para ambientes sem bash
 */

const { Client } = require('pg');

const MAX_ATTEMPTS = 30;
const RETRY_DELAY = 2000; // 2 segundos

async function sleep(ms) {
  return new Promise(resolve => setTimeout(resolve, ms));
}

async function testConnection() {
  const client = new Client({
    connectionString: process.env.DATABASE_URL,
  });

  try {
    await client.connect();
    await client.query('SELECT 1');
    await client.end();
    return true;
  } catch (error) {
    if (client) {
      try {
        await client.end();
      } catch (e) {
        // Ignorar erro ao fechar conex√£o falha
      }
    }
    throw error;
  }
}

async function waitForDatabase() {
  console.log('üîç Aguardando banco de dados ficar dispon√≠vel...');
  console.log(`üì° DATABASE_URL: ${process.env.DATABASE_URL?.replace(/:[^:]*@/, ':****@')}`);
  console.log('');

  for (let attempt = 1; attempt <= MAX_ATTEMPTS; attempt++) {
    console.log(`‚è≥ Tentativa ${attempt}/${MAX_ATTEMPTS}...`);

    try {
      await testConnection();
      console.log('‚úÖ Banco de dados est√° pronto!');
      console.log('üéâ Conex√£o estabelecida com sucesso!');
      console.log('');
      return true;
    } catch (error) {
      console.log(`‚ùå Ainda n√£o dispon√≠vel: ${error.message}`);

      if (attempt < MAX_ATTEMPTS) {
        console.log(`‚è∏Ô∏è  Aguardando ${RETRY_DELAY / 1000} segundos antes de tentar novamente...`);
        console.log('');
        await sleep(RETRY_DELAY);
      }
    }
  }

  throw new Error(
    `‚ùå N√£o foi poss√≠vel conectar ao banco de dados ap√≥s ${MAX_ATTEMPTS} tentativas (${(MAX_ATTEMPTS * RETRY_DELAY) / 1000} segundos)`
  );
}

// Executar
waitForDatabase()
  .then(() => {
    console.log('‚úÖ Pronto para executar migrations!');
    process.exit(0);
  })
  .catch((error) => {
    console.error('');
    console.error('üî¥ ERRO FATAL:');
    console.error(error.message);
    console.error('');
    console.error('üí° Poss√≠veis causas:');
    console.error('   1. PostgreSQL n√£o est√° rodando no Railway');
    console.error('   2. DATABASE_URL est√° incorreta');
    console.error('   3. Private networking n√£o est√° configurado');
    console.error('   4. Firewall bloqueando conex√£o');
    console.error('');
    console.error('üîß Solu√ß√µes:');
    console.error('   1. Verificar logs do PostgreSQL no Railway');
    console.error('   2. Confirmar DATABASE_URL nas vari√°veis');
    console.error('   3. Verificar Private Networking no projeto');
    console.error('');
    process.exit(1);
  });
